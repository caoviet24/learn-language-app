version: '3.8'

services:
  kafka:
    image: bitnami/kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      # KRaft mode configuration
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      
      # Listeners configuration
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      
      # Broker configuration
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      
      # Log configuration
      KAFKA_CFG_LOG_RETENTION_HOURS: 168
      KAFKA_CFG_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      
      # JVM settings
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms512m"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - learnlanguage-network
    healthcheck:
      test: kafka-topics.sh --bootstrap-server localhost:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_PROVECTUS: DEBUG
    networks:
      - learnlanguage-network
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: "Test@123"
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Express"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - learnlanguage-network
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "Test@123" -Q "SELECT 1"
      interval: 30s
      timeout: 10s
      retries: 3

  learnlanguage-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: learnlanguage-api
    depends_on:
      kafka:
        condition: service_healthy
      sqlserver:
        condition: service_healthy
    ports:
      - "8081:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__WriteDb=Server=sqlserver,1433;Database=WriteDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - ConnectionStrings__ReadDb=Server=sqlserver,1433;Database=ReadDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - KafkaSettings__BootstrapServers=kafka:9092
      - KafkaSettings__Enabled=true
    networks:
      - learnlanguage-network
    restart: unless-stopped

volumes:
  sqlserver_data:
    driver: local
  kafka_data:
    driver: local

networks:
  learnlanguage-network:
    driver: bridge